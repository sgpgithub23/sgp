import Head from "next/head";
import React, { FormEvent, Fragment, useEffect, useState } from "react";
import Navbar from "@/components/Navbar";
import styles from "@/styles/Agenda.module.scss";
import { FooterCompleto } from "@/components/FooterCompleto";
import { useRouter } from "next/router";
import Button from "@/components/Button";
import Input from "@/components/Input";
import { HiMagnifyingGlass } from "react-icons/hi2";
import { CursosTreinamentosType } from "@/typings/CursosTreinamentos";
import { BsArrowLeftCircle, BsPersonCircle } from "react-icons/bs";
import { Cursos, Treinamentos } from "@/utils/cursos-treinamentos";
import classNames from "classnames";
import { Dialog, Transition } from "@headlessui/react";
import Image from "next/image";
import { InferGetStaticPropsType } from "next";
import { AgendaRequisicao } from "@/typings/Requisicoes/Agenda";
import { notify } from "@/components/Notification";
import { extractErrorMessages } from "@/utils/tratamento-erros";
import { toast } from "react-toastify";
import { ErrorMessageReq } from "@/components/ReqErrorMessage";
import Spinner from "@/components/Spinner";
import FriendlyErrorMessage from "@/components/FriendlyErrorMessage";

export async function getStaticProps() {
  let errorsAgenda: any[] = [];

  const res = await fetch(
    `${process.env.NEXT_PUBLIC_GET_INFOS_SGP_CONTATO}?action=1&model=agendaturmas`
  );
  let agenda: AgendaRequisicao[] = await res.json();

  errorsAgenda = extractErrorMessages(agenda);

  if (errorsAgenda.length > 0) {
    agenda = [];
  }

  return {
    props: {
      agenda,
      errorsAgenda,
    },
    revalidate: 600,
  };
}

function formatDate(dateString : string) {
  if (!dateString) return ''; 

  const date = new Date(dateString);
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();

  return `${day}/${month}/${year}`;
}

export default function Agenda({
  agenda,
  errorsAgenda,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [modalContent, setModalContent] = useState<AgendaRequisicao>();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [curso, setCurso] = useState<string>("");
  const [cursoArray, setCursoArray] = useState<AgendaRequisicao[]>(
    agenda.slice(0, 6)
  );

  const { push } = useRouter();

  function modalState(content: AgendaRequisicao) {
    setIsModalOpen(!isModalOpen);
    setModalContent(content);
  }

  // useEffect(() => {
  //   if (errorsAgenda.length > 0) {
  //     errorsAgenda.forEach((erro) => toast.error(erro));
  //   }
  // }, []);

  return (
    <div className={styles.main}>
      <Head>
        <title>SGP - Soluções em Gestão Público</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="shortcut icon" href="/favicon/favicon.ico" />
      </Head>
      <Navbar />
      <div className={styles.content}>
        <div className={styles.headerContent}>
          <p>
          <strong>“O conhecimento </strong>é o único bem que não pode ser tirado de você".
          </p>
        </div>
      </div>
      <div className={styles.pageSize}>
        <div className={styles.agendaCursosTreinamentos}>
          <div className={styles.imgOnRightSide}>
            <div>
              <h1>Agenda de Cursos e Treinamentos</h1>
              <hr />
              <p>
                Temos horário flexível <br /> Das 8h30 às 17h30 <br /> Na SGP ou{" "}
                <em>In Company</em>!
              </p>
              <Button
                color="darkBlue"
                title="Conheça nossos professores"
                onClick={() => push("/nossos-professores")}
              />
            </div>
            <div className={styles.imagem}>
              <Image
      
                src="/images/agenda/calendario.webp"
                alt="Calendário de papel marcado em algumas datas importantes do mês"
                width={696}
                height={384}
                className={"imgOnHover"}
              />
            </div>
          </div>
        </div>
        <div className={styles.mainContentForm}>
          <div className={styles.introduction}>
            <div className={styles.left}>
              <h2>Confira nossa agenda de cursos e treinamentos</h2>
              <span>
                Conheça nossos cursos de excelência, que aplicam as boas
                práticas de mercado.
              </span>
            </div>
            <div className={styles.right}>
              <Input
                withicon={true}
                placeholder="Pesquisar curso..."
                label=""
                type="text"
                icon={<HiMagnifyingGlass />}
                onChange={(e) => setCurso(e.target.value)}
              />
            </div>  
          </div>
          {errorsAgenda.length <= 0 ? (
            cursoArray.length > 0 && (
              <>
                <div className={styles.cursosNovos}>
                  {cursoArray.filter((x) => x.titulocursotreinamento.toLowerCase().includes(curso.toLowerCase())).map((x, i) => (
                    <div className={styles.curso} key={i}>
                      <div className={styles.detalhes}>
                      <div className={classNames({
                        [styles.isCurso]: x?.modalidade === "C",
                        [styles.isTreinamento]: x?.modalidade !== "C",
                      })}>
                        {x?.presencialonline === "P" ? " Presencial" : " On-line"}
                      </div>
                        <span>Data: {formatDate(x?.dataprogamada)}</span>
                      </div>
                      <div role="button" onClick={() => modalState(x)}>
                        <h4>
                          <b>{x?.titulocursotreinamento}</b>
                        </h4>
                        <p role="button">
                          <span>
                            <BsPersonCircle /> Conferir detalhes
                          </span>
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
                <p>
                  Confira a lista completa{" "}
                  <b
                    style={{ cursor: "pointer" }}
                    onClick={() => {
                      push("/agenda/cursos-treinamentos-completo");
                      setIsLoading(true);
                    }}
                  >
                    clicando aqui!
                  </b>
                </p>
                {isLoading && (
                  <div className={styles.loadSpinnerr}>
                    <Spinner />
                  </div>
                )}
              </>
            )
          ) : (
            <FriendlyErrorMessage commommsg />
          )}
        </div>
      </div>
      {/* <div className={styles.professores}>
        <h1>Corpo docente</h1>
        <p>
          Conheça nosso corpo docente de excelência e gabarito, que aplicam e
          vivenciam as melhores boas práticas do mercado.
        </p>
        <Button
          onClick={() => push("/nossos-professores")}
          color="darkBlue"
          title="Ver todos os professores"
        />
      </div> */}
      {/* <div className={styles.empresaIndicadaBottom}>
                <hr />
                <h2>“O Conhecimento é o único bem que não pode ser tirado de você”.</h2>
            </div> */}
      {/* <section className={styles.degustacaoAll}>
        <div className={styles.degustacao}>
          <div className={styles.leftSide}>
            <h1>Publique conosco seu artigo ou parecer.</h1>
            <div className={styles.livroExplicacao}>
              <p>
                Publique conosco seu artigo ou parecer. <br />
                Queremos difundir novas ideias e pensamentos.
              </p>
            </div>
            <Button
              title="Publicar agora!"
              onClick={() => push("/contato")}
              color="blue"
            />
          </div>
          <div className={styles.rightSide}>
            <Image
              width={307.71}
              height={307.71}
              src={"/images/agenda/p1.webp"}
              alt="Exemplo do com a foto do autor com o periódico publicado "
              className={"imgOnHover"}
            />
            <Image
              width={307.71}
              height={307.71}
              src={"/images/agenda/p2.webp"}
              alt="Capa do periódico públicado. SLC - Solução em Licitações e Contratos"
              className={"imgOnHover"}
            />
            <Image
              width={307.71}
              height={307.71}
              src={"/images/agenda/p3.webp"}
              className={"imgOnHover"}
              alt="Exemplo de capa de um perídico mostrando soluções autorais"
            />
            <Image
              width={307.71}
              height={307.71}
              className={"imgOnHover"}
              src={"/images/agenda/p4.webp"}
              alt="Exemplo do com a foto do autor com o periódico publicado"
            />
          </div>
        </div>
      </section> */}
      <div className={styles.professores}>
        <h1>Inicie um contato preenchendo o formulário</h1>
        <p>
          Disponibilizamos vários canais de comunicação e este é um deles para
          que você possa se comunicar mais rápido conosco!
        </p>
        <Button
          onClick={() => push("/contato")}
          color="darkBlue"
          title="Quero mais informações!"
        />
      </div>

      <FooterCompleto />

      <Transition appear show={isModalOpen} as={Fragment}>
        <Dialog
          as="div"
          style={{ zIndex: 40 }}
          onClose={() => setIsModalOpen(false)}
        >
          <div className={styles.fullBodyModal}>
            <div className={styles.bodyModalStarted}>
              <Dialog.Panel className={styles.modalPanel}>
                <div
                  className={styles.voltarParaInicio}
                  onClick={() => setIsModalOpen(false)}
                >
                  <BsArrowLeftCircle />
                  <span>Voltar para o início</span>
                </div>
                <Dialog.Title as="h3" className={styles.modalTitle}>
                  <p>{modalContent?.titulocursotreinamento}</p>
                  <span>Objetivo</span>
                </Dialog.Title>
                <div className={styles.contentAboveTitle}>
                  <span>{modalContent?.objetivo}</span>
                </div>
                <Dialog.Title as="h3" className={styles.modalTitle}>
                  <span>Público Alvo</span>
                </Dialog.Title>
                <div className={styles.contentAboveTitle}>
                  <span>{modalContent?.publicoalvo}</span>
                </div>
                <div className={styles.contentAboveTitleProfessor}>
                  <p>Professor</p>
                  <p style={{ textAlign: "center" }}>
                    {modalContent?.nomeprofessor}
                  </p>
                </div>
                <div className={styles.imageAboveTitle}>
                  <Image
                    className={"imgOnHover"}
                    alt={`Foto do(a) professor(a) ${modalContent?.nomeprofessor}`}
                    width={200}
                    height={200}
                    src={`https://www.sgpsolucoes.com.br/imagens/fotosprofessores/${modalContent?.nomearquivofotoprofessor}`}
                  />
                </div>
                <Dialog.Title as="h3" className={styles.modalTitle}>
                  <span>Qualificação do Professor</span>
                </Dialog.Title>
                <div className={styles.contentAboveTitle}>
                  <span>{modalContent?.qualificacaoprofessor}</span>
                </div>
                {/* <I */}
              </Dialog.Panel>
            </div>
          </div>
        </Dialog>
      </Transition>
    </div>
  );
}

