import Head from "next/head";
import React, { FormEvent, useRef, useState } from "react";
import Navbar from "@/components/Navbar";
import styles from "@/styles/Agenda2030.module.scss";
import { FooterCompleto } from "@/components/FooterCompleto";
import { useRouter } from "next/router";
import Button from "@/components/Button";
import Image from "next/image";
import { AiOutlineCheckCircle, AiOutlineMail } from "react-icons/ai";
import { BsTelephone } from "react-icons/bs";
import Input from "@/components/Input";
import { useForm } from "react-hook-form";
import { FormMBA } from "@/typings/FormMba";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { getColorVariants } from "@/utils/getColorVariants";
import ReCAPTCHA from "react-google-recaptcha";

const schema = yup.object().shape({
  nome: yup.string().required("Campo obrigatório"),
  cpf: yup.string().required("Campo obrigatório"),
  cep: yup.string().required("Campo obrigatório"),
  endereco: yup.string().required("Campo obrigatório"),
  bairro: yup.mixed().nullable().required("A file is required"),
  cidade: yup.string().required("Campo obrigatório"),
  estado: yup.string().required("Campo obrigatório"),
  email: yup.string().required("Campo obrigatório"),
  celular: yup.string().required("Campo obrigatório"),
  telefoneCompl: yup.string().required("Campo obrigatório"),
  tipoPagamento: yup
    .array()
    .of(yup.string().nullable())
    .required("Campo obrigatório"),
  anexo: yup.mixed().required("*Avatar image is required"),
});

const initialValues = {
  nome: "",
  cpf: "",
  endereco: "",
  cep: "",
  bairro: "",
  cidade: "",
  estado: "",
  email: "",
  celular: "",
  telefoneCompl: "",
  tipoPagamento: "",
  anexo: null,
};

const tiposPagamento = [
  { id: "pix", label: "PIX" },
  { id: "boleto", label: "Boleto Bancário" },
  { id: "depositoCaixa", label: "Depósito Caixa Econômica Federal" },
  { id: "tedCaixa", label: "TED Caixa Econômica Federal" },
  { id: "debito", label: "Cartão de Débito" },
  { id: "credito", label: "Cartão de Crédito" },
  { id: "naoPagar", label: "Não realizei o pagamento ainda" },
];

export default function Verde() {
  const { push, pathname } = useRouter();
  const color = pathname.split("/")[2];
  const [inputFileName, setInputFileName] = useState<string>(
    "Clique aqui para escolher o arquivo"
  );
  const { bluredGreen, green1, green2 } = getColorVariants(color);
  const captchaRef = useRef(null);
  const [recaptchaResponse, setRecaptchaResponse] = useState<any>();
  const onSubmit = async (ev: FormEvent<HTMLFormElement>) => {
    ev.preventDefault();

    const response = await fetch("/api/verify-token", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ token: recaptchaResponse }),
    });

    const result = await response.json();

    try {
      const res = await fetch("/api/sendEmail", {
        headers: {
          "Content-Type": "application/json",
          "x-auth-token": process.env.NEXT_PUBLIC_TOKEN!,
          "x-source": process.env.NEXT_PUBLIC_URL_SMTP_LOCAWEB!,
          "User-Agent": "locaweb-smtp-nodejs",
        },
        method: "POST",
      });
      const result = await res.json();
    } catch (error) {}
  };
  const {
    register,
    formState: { errors, isValid, isSubmitting },
    getValues,
    reset,
  } = useForm<FormMBA>({
    defaultValues: initialValues,
    mode: "all",
    resolver: yupResolver(schema),
  });

  return (
    <div className={styles.main}>
      <Head>
        <title>SGP - Soluções em Gestão Público</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="shortcut icon" href="/favicon/favicon.ico" />
      </Head>
      <Navbar />
      {/* style={{backgroundColor: `#${color}`}} */}
      <section
        className={styles.content}
        style={{ backgroundColor: `#${color}` }}
      >
        <div
          className={styles.bluredBall}
          style={{ backgroundColor: `${bluredGreen}` }}
        ></div>
        <div className={styles.headerContent}>
          <div className={styles.left}>
            <div className={styles.mainTitle}>
              <hr
                style={{
                  backgroundColor: `${green2}`,
                  marginBlock: "10px",
                  border: `1px solid ${green2}`,
                }}
              />
              <h2>
                {" "}
                <strong>
                  Agenda 2030 - Direito e Desenvolvimento Sustentável
                </strong>
                : <em>governança, sociedade e meio ambiente</em>{" "}
              </h2>
            </div>
          </div>
          <div className={styles.center}>
            <div>
              <p>
                Conheça as principais questões da Agenda de Sustentabilidade do
                séc. XXI, em função do Acordo de Paris (2015) e da Agenda 2030
                da Resolução da ONU, tratando das 17 metas dos Objetivos de
                Desenvolvimento Sustentável (ODS).
              </p>
            </div>
            <div className={styles.precobtn}>
              <div>
                <p>
                  R$ 99,00 <br /> (com frente incluso)
                </p>
              </div>
            </div>
          </div>
          <div className={styles.right}>
            <Image
              alt="Agenda 2030 - Direito e Desenvolvimento Sustentável: governança, sociedade e meio ambiente"
              src="/images/periodicos/agenda2030.webp"
              width={453}
              height={323}
              className={"imgOnHover"}
            />
            <div className={styles.title}>
              <hr />
            </div>
          </div>
        </div>
      </section>
      <div className={styles.pageSize}>
        <div className={styles.infoProduto}>
          <h1>Informações sobre o produto</h1>
          <hr
            style={{
              backgroundColor: `${green2}`,
              border: `1px solid ${green2}`,
            }}
          />
          <div>
            <p>
              Com o Prefácio do Professor Paulo de Bessa Antunes, esta obra
              apresenta um conteúdo inovador, que, de forma preliminar, é
              apresentado como contribuição no debate referente à Agenda 2030,
              um tema vital para a mudança de paradigma, que a humanidade
              precisa no âmbito do combate às mudanças climáticas e da transição
              energética indispensável para as futuras gerações.
            </p>
            <p>
              <b>Organização: </b>Organização: Humberto Eustáquio César Mota
              Filho, Vanessa Cerqueira Reis de Carvalho e José Francisco
              Lumango.
            </p>
            <p>
              <b>Autores: </b> Carolina Gladyer Rabelo Saches, Gabriela Alves
              Mendes Blanchet, Humberto Eustáquio César Mota Filho, Kátia
              Santos, José Francisco Lumango, Renata Andrade Vilarinho, Tatiana
              Bastos e Vanessa Cerqueira Reis de Carvalho.
            </p>
          </div>
        </div>
      </div>
      <section className={styles.passoAPasso}>
        <h1>Siga o passo a passo.</h1>
        <hr
          style={{
            backgroundColor: `${green2}`,
            border: `1px solid ${green2}`,
          }}
        />
        <div className={styles.stepsInfos}>
          <div className={styles.solitacaoInscricao}>
            <div className={styles.headerTopico}>
              <AiOutlineCheckCircle style={{ color: `${green2}` }} />
              <h3>Passo 1 - É nos enviar sua solicitação de inscrição:</h3>
            </div>
            <p>
              Digite os seus dados abaixo para iniciarmos o processo de registro
              da solicitação. É importante que os dados estejam corretos para
              que não haja problema no envio do livro.
            </p>
          </div>

          <div className={styles.comprovantePagamento}>
            <div className={styles.headerTopico}>
              <AiOutlineCheckCircle style={{ color: `${green2}` }} />
              <h3>Passo 3 - Enviar comprovante de pagamento:</h3>
            </div>
            <p>
              Após pagamento envie o comprovante para a SGP - Soluções em Gestão
              Pública no e-mail:{" "}
              <b>
                <br />
                <br /> atendimento@sgpsolucoes.com.br <br />{" "}
              </b>
              <br /> ou, anexo a solicitação abaixo, para que possamos agilizar
              o processo de envio e registrar em nosso controle!!!
            </p>
          </div>

          <div className={styles.realizarPagamento}>
            <div className={styles.headerTopico}>
              <AiOutlineCheckCircle style={{ color: `${green2}` }} />
              <h3>Passo 2 - Realizar o pagamento por um dos canais:</h3>
            </div>
            <p>Há 6 (seis) vias de possibilidade de pagamento:</p>
            <p>
              1 - PIX: Chave: 29759932000102 | SGP - Soluções em Gestão Pública
              | CNPJ: 29.759.932/0001-02 | Banco: 104 Caixa Econômica Federal |
              Ag.: 1679 | Conta Corrente: 3184-4
            </p>
            <p>
              2 - Boleto: É necessário que o cliente solicite-o junto a SGP -
              Soluções em Gestão Pública no canal de comunicação WhatsApp 11 9
              7443 5898 !!!
            </p>
            <p>
              3 - Depósito: SGP - Soluções em Gestão Pública | CNPJ:
              29.759.932/0001-02 | Banco: 104 Caixa Econômica Federal | Ag.:
              1679 | Conta Corrente: 3184-4
            </p>
            <p>
              4 - TED: SGP - Soluções em Gestão Pública | CNPJ:
              29.759.932/0001-02 | Banco: 104 Caixa Econômica Federal | Ag.:
              1679 | Conta Corrente: 3184-4
            </p>
            <p>
              5 - Cartão de Débito: Após cadastramento realizado abaixo
              (registro da solicitação), você será direcionado à tela de
              "Pagamento com Cartão de Débito | Operadora CIELO".
            </p>
            <p>
              6 - Cartão de Crédito: Após cadastramento realizado abaixo
              (registro da solicitação), você será direcionado à tela de
              "Pagamento com Cartão de Crédito | Operadora CIELO".
            </p>
          </div>

          <div className={styles.boletoBancario}>
            <div className={styles.headerTopico}>
              <AiOutlineCheckCircle style={{ color: `${green2}` }} />
              <h3>
                Pagamento via Boleto Bancário consulte a SGP - Soluções em
                Gestão Pública.
              </h3>
            </div>
            <p>
              A postagem do livro nos CORREIOS será realizada somente após o
              pagamento do VALOR DO PRODUTO + FRETE e, consequentemente, o
              apontamento correto do ENDEREÇO DE ENTREGA, confirmado pelo
              comprador.
            </p>

            <div className={styles.duvidas}>
              <h3>Está com dúvidas?</h3>
              <p>Central de Atendimento</p>

              <ul>
                <li>
                  <BsTelephone style={{ color: `${green2}` }} />
                  <span>(11) 3237 4232</span>
                </li>
                <li>
                  <BsTelephone style={{ color: `${green2}` }} />
                  <span>(11) 9 7443 5898</span>
                </li>
                <li>
                  <AiOutlineMail style={{ color: `${green2}` }} />
                  <span>atendimento@sgpsolucoes.com.br</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </section>

      <section className={styles.dadosPagamentoContato}>
        <h1>
          Os campos são obrigatórios e é imprescindível o correto preenchimento
          para <b>envio do produto e emissão da nota fiscal!</b>
        </h1>
        <form>
          <div className={styles.formContato}>
            <Input
              type="text"
              label="Nome completo*"
              register={register("nome")}
              placeholder="Ex.: João Ramalho de Souza Filho"
              error={errors.nome?.message}
            />

            <Input
              type="text"
              label="CPF*"
              register={register("cpf")}
              error={errors.cpf?.message}
              placeholder="999.999.999-99"
              mask="999.999.999-99"
            />

            <Input
              name="endereco"
              type="text"
              label="E-mail"
              register={register("endereco")}
              error={errors.endereco?.message}
              placeholder="R. João Gomes"
            />

            <Input
              name="cep"
              label="CEP*"
              register={register("cep")}
              error={errors.cep?.message}
              placeholder="12323-222"
              mask="99999-999"
            />

            <Input
              name="cidade"
              type="text"
              label="Cidade"
              register={register("cidade")}
              error={errors.cidade?.message}
              placeholder="Osasco "
            />

            <Input
              name="estado"
              label="Estado"
              register={register("estado")}
              error={errors.celular?.message}
              placeholder="São Paulo"
            />

            <Input
              name="email"
              label="E-mail*"
              register={register("email")}
              error={errors.email?.message}
              placeholder="email@dominio.xxx.xx"
            />

            <Input
              name="celular"
              type="text"
              label="Celular*"
              register={register("celular")}
              error={errors.celular?.message}
              placeholder="(13) 99999-9999"
              mask="(99) 99999-9999"
            />

            <Input
              name="telefoneCompl"
              type="text"
              label="Telefone Coml"
              register={register("telefoneCompl")}
              error={errors.telefoneCompl?.message}
              placeholder="(13) 99999-9999"
              mask="(99) 99999-9999"
            />

            <div>
              <div className={styles.opcoesPagamento}>
                <p>Indique abaixo a via de pagamento que foi utilizada: *</p>
                <div>
                  {tiposPagamento.map((x, i) => (
                    <div className={styles.inputRadio} key={i}>
                      <input
                        type="radio"
                        id={x.id}
                        name="tipoPagamento"
                        value={x.label}
                      />
                      <label htmlFor={x.id}>{x.label}</label>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            <div>
              <div className={styles.anexo}>
                <p>Indique abaixo a via de pagamento que foi utilizada: *</p>

                <Input
                  name="anexo"
                  as="file"
                  label={inputFileName}
                  register={register("anexo")}
                  error={errors.anexo?.message}
                  onChange={(e) => {
                    setInputFileName(e.target.value.split("\\")[2]);
                  }}
                />
              </div>
            </div>
          </div>

          <div className={styles.cienciaSobCompra}>
            <div>
              <b>
                "Estou ciente que o livro só será enviado após confirmação do
                pagamento pela SGP - Soluções em Gestão Pública."
              </b>
              <p>
                Após o envio de seus dados, você receberá um e-mail de
                confirmação de solicitação de compra. Caso não receba o e-mail
                de confirmação, contate a SGP - Soluções em Gestão Pública para
                verificar o que ocorreu. Lembre-se, o envio do livro será
                realizado após confirmação de pagamento.
              </p>
              <p>
                Estou ciente também de que os dados enviados à empresa SGP -
                Soluções em Gestão Pública, que são dados pessoais e sensíveis
                de minha propriedade, assim como dados da empresa, do órgão
                público ou da entidade, serão concedidos e utilizados sob os
                critérios abaixo, de acordo com a{" "}
                <b>
                  {" "}
                  Política de Privacidade para Proteção de Dados mencionada na
                  Lei Geral de Proteção de Dados - LGPD:
                </b>
              </p>
            </div>
            <p>Ao enviar os dados do formulário: </p>
            <ul>
              <li>
                <AiOutlineCheckCircle style={{ color: `${green2}` }} />
                <span>
                  Estou ciente e aceito a{" "}
                  <b
                    onClick={() => push("/documentacoes/cookies")}
                    style={{ cursor: "pointer" }}
                  >
                    {" "}
                    Política de Cookies *
                  </b>
                </span>
              </li>
              <li>
                <AiOutlineCheckCircle style={{ color: `${green2}` }} />
                <span>
                  Estou ciente e aceito a{" "}
                  <b
                    style={{ cursor: "pointer" }}
                    onClick={() => push("/documentacoes/politica-privacidade")}
                  >
                    Política de Privacidade *
                  </b>
                </span>
              </li>
              <li>
                <AiOutlineCheckCircle style={{ color: `${green2}` }} />
                <span>
                  Estou ciente e aceito o{" "}
                  <b
                    style={{ cursor: "pointer" }}
                    onClick={() => push("/documentacoes/termos-uso")}
                  >
                    Termo de Consentimento da Privacidade *
                  </b>
                </span>
              </li>
            </ul>
            <div className={styles.buttonPosition}>
              <ReCAPTCHA
                // @ts-ignore
                sitekey={process.env.NEXT_PUBLIC_API_RECAPTCHA_SIE}
                ref={captchaRef}
                onChange={(value) => setRecaptchaResponse(value)}
              />
            </div>
            <div className={styles.buttonPosition}>
              <Button
                color="darkBlue"
                title="Enviar dados preenchidos"
                disabled={isSubmitting || !isValid || !recaptchaResponse}
              />
            </div>
          </div>
        </form>
      </section>
      <FooterCompleto />
    </div>
  );
}
